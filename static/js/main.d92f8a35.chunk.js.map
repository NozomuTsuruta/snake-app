{"version":3,"sources":["utils/index.ts","utils/constants.ts","components/Navigation.tsx","components/Field.tsx","components/Button.tsx","components/ManipulationPanel.tsx","hooks/useSnakeGame.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["initFields","fieldSize","snake","fields","i","cols","Array","fill","push","y","x","food","getFoodPosition","excludes","Math","floor","random","some","item","initialPosition","initialValues","Difficulty","GameStatus","Direction","OppositeDirection","up","right","left","down","Delta","DirectionKeyCodeMap","37","38","39","40","Navigation","length","difficulty","onChangeDifficulty","upVisibility","downVisibility","className","onClick","Field","map","row","column","Button","status","onRestart","onStart","onStop","ManipulationPanel","onChange","icon","faArrowLeft","faArrowUp","faArrowDown","faArrowRight","useSnakeGame","timer","useRef","unsubscribe","clearInterval","current","useState","setFields","tick","setTick","direction","setDirection","body","setBody","setStatus","setDifficulty","useEffect","interval","setInterval","handleMoving","updateDirection","useCallback","newDirection","updateDifficulty","handleKeyDown","e","keyCode","document","addEventListener","removeEventListener","delta","newPosition","position","isCollision","isEatingMyself","newBody","removingTrack","pop","unshift","start","stop","reload","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.d92f8a35.chunk.js","sourcesContent":["import { IPosition } from \"./types\";\nexport const initFields = (fieldSize: number, snake: any) => {\n  const fields: string[][] = [];\n  for (let i = 0; i < fieldSize; i++) {\n    const cols = new Array(fieldSize).fill(\"\");\n    fields.push(cols);\n  }\n  fields[snake.y][snake.x] = \"snake\";\n\n  const food = getFoodPosition(fieldSize, [snake]);\n  fields[food.y][food.x] = \"food\";\n\n  return fields;\n};\n\nexport const getFoodPosition = (fieldSize: number, excludes: IPosition[]) => {\n  while (true) {\n    const x = Math.floor(Math.random() * (fieldSize - 1 - 1)) + 1;\n    const y = Math.floor(Math.random() * (fieldSize - 1 - 1)) + 1;\n    const conflict = excludes.some((item) => item.x === x && item.y === y);\n\n    if (!conflict) {\n      return { x, y };\n    }\n  }\n};\n\nexport const isCollision = (fieldSize: number, position: IPosition) => {\n  if (position.y < 0 || position.x < 0) {\n    return true;\n  }\n\n  if (position.y > fieldSize - 1 || position.x > fieldSize - 1) {\n    return true;\n  }\n\n  return false;\n};\n\nexport const isEatingMyself = (fields: string[][], position: IPosition) => {\n  return fields[position.y][position.x] === \"snake\";\n};\n","import { initFields } from \".\";\n\nexport const fieldSize = 35;\n\nexport const initialPosition = { x: 17, y: 17 };\n\nexport const initialValues = initFields(fieldSize, initialPosition);\ninitialValues[9][9] = \"food\";\n\nexport const defaultDifficulty = 3;\n\nexport const defaultInterval = 100;\n\nexport const Difficulty = [1000, 500, 100, 50, 10] as const;\n\nexport const GameStatus = {\n  init: \"init\",\n  playing: \"playing\",\n  suspended: \"suspended\",\n  gameover: \"gameover\",\n} as const;\n\nexport const Direction = {\n  up: \"up\",\n  right: \"right\",\n  left: \"left\",\n  down: \"down\",\n} as const;\n\nexport const OppositeDirection = {\n  up: \"down\",\n  right: \"left\",\n  left: \"right\",\n  down: \"up\",\n} as const;\n\nexport const Delta = {\n  up: { x: 0, y: -1 },\n  right: { x: 1, y: 0 },\n  left: { x: -1, y: 0 },\n  down: { x: 0, y: 1 },\n} as const;\n\nexport const DirectionKeyCodeMap = {\n  37: Direction.left,\n  38: Direction.up,\n  39: Direction.right,\n  40: Direction.down,\n} as const;\n","import React from \"react\";\nimport { defaultDifficulty, Difficulty } from \"../utils/constants\";\n\ntype Props = {\n  length: number;\n  difficulty: number;\n  onChangeDifficulty: (dif: number) => void;\n};\n\nexport const Navigation: React.FC<Props> = ({\n  length,\n  difficulty = defaultDifficulty,\n  onChangeDifficulty,\n}) => {\n  const upVisibility = difficulty < Difficulty.length ? \"\" : \"is-hidden\";\n  const downVisibility = difficulty > 1 ? \"\" : \"is-hidden\";\n  const onUpDifficulty = () => onChangeDifficulty(difficulty + 1);\n  const onDownDifficulty = () => onChangeDifficulty(difficulty - 1);\n  \n  return (\n    <div className=\"navigation\">\n      <div className=\"navigation-item\">\n        <span className=\"navigation-label\">Length: </span>\n        <div className=\"navigation-item-number-container\">\n          <div className=\"num-board\">{length}</div>\n        </div>\n      </div>\n      <div className=\"navigation-item\">\n        <span className=\"navigation-label\">Difficulty: </span>\n        <div className=\"navigation-item-number-container\">\n          <span className=\"num-board\">{difficulty}</span>\n          <div className=\"difficulty-button-container\">\n            <div\n              className={`difficulty-button difficulty-up ${upVisibility}`}\n              onClick={onUpDifficulty}></div>\n            <div\n              className={`difficulty-button difficulty-down ${downVisibility}`}\n              onClick={onDownDifficulty}></div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\n\ntype Props = {\n  fields: string[][];\n};\n\nexport const Field: React.FC<Props> = ({ fields }) => (\n  <div className=\"field\">\n    {fields.map((row) =>\n      row.map((column) => <div className={`dots ${column}`}></div>)\n    )}\n  </div>\n);\n","import React from \"react\";\nimport { GameStatus } from \"../utils/constants\";\nimport { IStatus } from \"../utils/types\";\n\ntype Props = {\n  status: IStatus;\n  onRestart: () => void;\n  onStart: () => void;\n  onStop: () => void;\n};\n\nexport const Button: React.FC<Props> = ({\n  status,\n  onRestart,\n  onStart,\n  onStop,\n}) => {\n  return (\n    <div className=\"button\">\n      {status === GameStatus.gameover && (\n        <button className=\"btn btn-gameover\" onClick={onRestart}>\n          gameover\n        </button>\n      )}\n      {status === GameStatus.init && (\n        <button className=\"btn btn-init\" onClick={onStart}>\n          start\n        </button>\n      )}\n      {status === GameStatus.suspended && (\n        <button className=\"btn btn-suspended\" onClick={onStart}>\n          start\n        </button>\n      )}\n      {status === GameStatus.playing && (\n        <button className=\"btn btn-playing\" onClick={onStop}>\n          stop\n        </button>\n      )}\n    </div>\n  );\n};\n","import React from \"react\";\nimport { IDirection } from \"../utils/types\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faArrowLeft,\n  faArrowUp,\n  faArrowDown,\n  faArrowRight,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport { Direction } from \"../utils/constants\";\n\ntype Props = {\n  onChange: (direction: IDirection) => void;\n};\n\nexport const ManipulationPanel: React.FC<Props> = ({ onChange }) => {\n  const onUp = () => onChange(Direction.up);\n  const onRight = () => onChange(Direction.right);\n  const onLeft = () => onChange(Direction.left);\n  const onDown = () => onChange(Direction.down);\n\n  return (\n    <div className=\"manipulation-panel\">\n      <button className=\"manipulation-btn btn btn-left\" onClick={onLeft}>\n        <FontAwesomeIcon icon={faArrowLeft} />\n      </button>\n\n      <div>\n        <button className=\"manipulation-btn btn btn-up\" onClick={onUp}>\n          <FontAwesomeIcon icon={faArrowUp} />\n        </button>\n        <button className=\"manipulation-btn btn btn-down\" onClick={onDown}>\n          <FontAwesomeIcon icon={faArrowDown} />\n        </button>\n      </div>\n      <button className=\"manipulation-btn btn btn-right\" onClick={onRight}>\n        <FontAwesomeIcon icon={faArrowRight} />\n      </button>\n    </div>\n  );\n};\n","import { IDirection, IPosition, IStatus } from \"../utils/types\";\nimport { useCallback, useEffect, useRef, useState } from \"react\";\nimport {\n  defaultInterval,\n  defaultDifficulty,\n  initialPosition,\n  initialValues,\n  Delta,\n  Difficulty,\n  Direction,\n  DirectionKeyCodeMap,\n  GameStatus,\n  OppositeDirection,\n} from \"../utils/constants\";\nimport {\n  initFields,\n  isCollision,\n  isEatingMyself,\n  getFoodPosition,\n} from \"../utils\";\n\nconst useSnakeGame = () => {\n  const timer = useRef<NodeJS.Timeout>();\n\n  const unsubscribe = () => {\n    if (!timer) {\n      return;\n    }\n    clearInterval(timer.current as number | undefined);\n  };\n\n  const [fields, setFields] = useState(initialValues);\n  const [tick, setTick] = useState(0);\n  const [direction, setDirection] = useState<IDirection>(Direction.up);\n  const [body, setBody] = useState<IPosition[]>([]);\n  const [status, setStatus] = useState<IStatus>(GameStatus.init);\n  const [difficulty, setDifficulty] = useState(defaultDifficulty);\n\n  useEffect(() => {\n    setBody([initialPosition]);\n    const interval = Difficulty[difficulty - 1];\n    timer.current = setInterval(() => {\n      setTick((tick) => tick + 1);\n    }, interval);\n    return unsubscribe;\n  }, [difficulty]);\n\n  useEffect(() => {\n    if (body.length === 0 || status !== GameStatus.playing) {\n      return;\n    }\n    const canContinue = handleMoving();\n    if (!canContinue) {\n      unsubscribe();\n      setStatus(GameStatus.gameover);\n    }\n  }, [tick]);\n\n  const start = () => setStatus(GameStatus.playing);\n\n  const stop = () => setStatus(GameStatus.suspended);\n\n  const reload = () => {\n    timer.current = setInterval(() => {\n      setTick((tick) => tick + 1);\n    }, defaultInterval);\n    setStatus(GameStatus.init);\n    setBody([initialPosition]);\n    setDirection(Direction.up);\n    setFields(initFields(fields.length, initialPosition));\n    setDifficulty(defaultDifficulty);\n  };\n\n  const updateDirection = useCallback(\n    (newDirection: IDirection) => {\n      if (status !== GameStatus.playing) {\n        return;\n      }\n      if (OppositeDirection[direction] === newDirection) {\n        return;\n      }\n      setDirection(newDirection);\n    },\n    [direction, status]\n  );\n\n  const updateDifficulty = useCallback(\n    (difficulty: number) => {\n      if (status !== GameStatus.init) {\n        return;\n      }\n      if (difficulty < 1 || difficulty > Difficulty.length) {\n        return;\n      }\n      setDifficulty(difficulty);\n    },\n    [status]\n  );\n\n  useEffect(() => {\n    const handleKeyDown = (e: any) => {\n      const newDirection =\n        DirectionKeyCodeMap[e.keyCode as \"37\" | \"38\" | \"39\" | \"40\"];\n      if (!newDirection) {\n        return;\n      }\n      updateDirection(newDirection);\n    };\n    document.addEventListener(\"keydown\", handleKeyDown);\n    return () => document.removeEventListener(\"keydown\", handleKeyDown);\n  }, [updateDirection]);\n\n  const handleMoving = () => {\n    const { x, y } = body[0];\n    const delta = Delta[direction];\n    const newPosition = {\n      x: x + delta.x,\n      y: y + delta.y,\n    };\n    if (\n      isCollision(fields.length, newPosition) ||\n      isEatingMyself(fields, newPosition)\n    ) {\n      return false;\n    }\n\n    const newBody = [...body];\n    if (fields[newPosition.y][newPosition.x] !== \"food\") {\n      const removingTrack = newBody.pop()!;\n      fields[removingTrack.y][removingTrack.x] = \"\";\n    } else {\n      const food = getFoodPosition(fields.length, [...newBody, newPosition]);\n      fields[food.y][food.x] = \"food\";\n    }\n    fields[newPosition.y][newPosition.x] = \"snake\";\n    newBody.unshift(newPosition);\n\n    setBody(newBody);\n    setFields(fields);\n    return true;\n  };\n  return {\n    body,\n    difficulty,\n    fields,\n    status,\n    start,\n    stop,\n    reload,\n    updateDirection,\n    updateDifficulty,\n  };\n};\n\nexport default useSnakeGame;\n","import React from \"react\";\nimport { Navigation } from \"./components/Navigation\";\nimport { Field } from \"./components/Field\";\nimport { Button } from \"./components/Button\";\nimport { ManipulationPanel } from \"./components/ManipulationPanel\";\nimport useSnakeGame from \"./hooks/useSnakeGame\";\n\nfunction App() {\n  const {\n    body,\n    difficulty,\n    fields,\n    start,\n    stop,\n    reload,\n    status,\n    updateDirection,\n    updateDifficulty,\n  } = useSnakeGame();\n\n  return (\n    <div className=\"App\">\n      <header className=\"header\">\n        <div className=\"title-container\">\n          <h1 className=\"title\">Snake Game</h1>\n        </div>\n        <Navigation\n          length={body.length}\n          difficulty={difficulty}\n          onChangeDifficulty={updateDifficulty}\n        />\n      </header>\n      <main className=\"main\">\n        <Field fields={fields} />\n      </main>\n      <footer className=\"footer\">\n        <Button\n          status={status}\n          onStop={stop}\n          onStart={start}\n          onRestart={reload}\n        />\n        <ManipulationPanel onChange={updateDirection} />\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}